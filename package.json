{
    "name": "extensible-markdown",
    "displayName": "Extensible Markdown",
    "description": "Converts Markdown to HTML and saves in files, implements TOC with optional heading auto-numbering, HTML abbreviations, attributes, and additional substitutions and can be extended by any of the markdown-it plug-ins",
    "version": "8.3.3",
    "publisher": "sakryukov",
    "homepage": "https://www.SAKryukov.org",
    "author": {
        "name": "Sergey A Kryukov",
        "url": "https://www.SAKryukov.org"
    },
    "license": "MIT",
    "icon": "images/logo.png",
    "repository": {
        "type": "git",
        "url": "https://github.com/SAKryukov/vscode-extensible-markdown.git"
    },
    "engines": {
        "vscode": ">=1.84.2"
    },
    "categories": [
        "Other"
    ],
    "keywords": [
        "markdown"
    ],
    "activationEvents": [
        "onLanguage:markdown"
    ],
    "main": "./extension/main.js",
    "contributes": {
        "markdown.markdownItPlugins": true,
        "commands": [
            {
                "command": "extensible.markdown.convertToHtml",
                "title": "Markdown: Convert to HTML",
                "icon": {
                    "dark": "images/logo.png",
                    "light": "images/logo.png"
                }
            },
            {
                "command": "extensible.markdown.convertToHtml.all",
                "title": "Markdown: Convert to HTML all .md files in Workspace"
            }
        ],
        "menus": {
            "commandPalette": [
                {
                    "command": "extensible.markdown.convertToHtml",
                    "when": "resourceLangId == markdown && ExtensibleMarkdownReady"
                },
                {
                    "command": "extensible.markdown.convertToHtml.all",
                    "when": "resourceLangId == markdown && ExtensibleMarkdownReady"
                }  
            ],
            "editor/title": [
                {
                    "when": "resourceLangId == markdown && ExtensibleMarkdownReady",
                    "command": "extensible.markdown.convertToHtml",
                    "group": "navigation"
                }
            ],
            "editor/title/context": [
                {
                    "when": "resourceLangId == markdown && ExtensibleMarkdownReady",
                    "command": "extensible.markdown.convertToHtml",
                    "group": "markdown"
                }
            ],
            "editor/context": [
                {
                    "when": "editorTextFocus && resourceLangId == markdown && ExtensibleMarkdownReady",
                    "command": "extensible.markdown.convertToHtml",
                    "group": "markdown"
                }
            ],
            "explorer/context": [
                {
                    "when": "ExtensibleMarkdownReady",
                    "command": "extensible.markdown.convertToHtml.all",
                    "group": "markdown"
                }
            ]
        },
        "configuration": {
            "type": "object",
            "title": "Extensible Markdown",
            "properties": {
                "markdown.extensibleMarkdown.convertToHtml.openHtml": {
                    "description": "Upon successful conversion to an HTML file, open it in VSCode workspace;\nthis option is ignored if there is more than one file",
                    "type": "boolean",
                    "default": false
                },
                "markdown.extensibleMarkdown.convertToHtml.showHtmlInBrowser": {
                    "description": "Upon successful conversion to an HTML file, show it in the default Web browser",
                    "type": "boolean",
                    "default": false
                },
                "markdown.extensibleMarkdown.convertToHtml.embedCss": {
                    "description": "Embed CSS files in an output HTML file, otherwise reference external CSS files",
                    "type": "boolean",
                    "default": true
                },
                "markdown.extensibleMarkdown.convertToHtml.outputPath": {
                    "description": "Specifies output directory for HTML files, relative to workspace directory.\nIf the path is null or empty string, write HTML in the same directory of the input file.",
                    "type": "string",
                    "default": ""
                },
                "markdown.extensibleMarkdown.titleClassName": {
                    "description": "CSS class name for document title",
                    "type": "string",
                    "default": "title"
                },
                "markdown.extensibleMarkdown.titleLocatorRegex": {
                    "description": "Regular expression used to identify the paragraph used as a document title.\nIf this string is null or empty, the feature is disabled.",
                    "type": "string",
                    "default": "\\{title\\}"
                },
                "markdown.extensibleMarkdown.titleLocatorDecoratorStyle": {
                    "description": "Decorator style for the title locator syntax",
                    "type": "object",
                    "default": {
                        "cursor": "grab",
                        "fontWeight": "bold",
                        "borderRadius": "5px",
                        "color": "yellow",
                        "backgroundColor": "Maroon"
                    }
                },
                "markdown.extensibleMarkdown.abbreviationRegex": {
                    "markdownDescription": "Regular expression for abbreviation syntax, implemented as an extension of *emphasis* (\\*\\*) syntax",
                    "type": "string",
                    "default": "\\{(.+?)\\}"
                },
                "markdown.extensibleMarkdown.abbreviationDecoratorRegex": {
                    "markdownDescription": "Regular expression for the Decorator of abbreviation syntax, implemented as an extension of *emphasis* (\\*\\*) syntax.\nIf this string is null or empty, the feature is disabled.",
                    "type": "string",
                    "default": "\\*\\{(.+?)\\}.+?\\*"
                },
                "markdown.extensibleMarkdown.abbreviationDecoratorStyle": {
                    "markdownDescription": "Decorator style for abbreviation syntax, implemented as an extension of *emphasis* (\\*\\*) syntax",
                    "type": "object",
                    "default": {
                        "cursor": "zoom-in",
                        "borderRadius": "5px",
                        "border": "thin dashed Maroon",
                        "margin": 10,
                        "color": "Maroon",
                        "backgroundColor": "Gold"
                    }
                },
                "markdown.extensibleMarkdown.attributeRegex": {
                    "description": "Regular expression for attribute syntax.\nIf this string is null or empty, the feature is disabled.",
                    "type": "string",
                    "default": "\\{([a-z]+?)\\=([^\"^\\{^\\}]+?)\\}"
                },
                "markdown.extensibleMarkdown.attributeDecoratorStyle": {
                    "description": "Decorator style for attribute syntax",
                    "type": "object",
                    "default": {
                        "cursor": "copy",
                        "border": "thin solid Indigo",
                        "borderRadius": "3px",
                        "color": "Indigo",
                        "backgroundColor": "Lavender"
                    }
                },
                "markdown.extensibleMarkdown.cssClassRegex": {
                    "description": "Regular expression for CSS class syntax.\nIf this string is null or empty, the feature is disabled.",
                    "type": "string",
                    "default": "\\{\\.([^\"^\\{^\\}]+?)\\}"
                },
                "markdown.extensibleMarkdown.cssClassDecoratorStyle": {
                    "description": "Decorator style for CSS class syntax",
                    "type": "object",
                    "default": {
                        "cursor": "default",
                        "border": "thin dotted Maroon",
                        "borderRadius": "3px",
                        "color": "Maroon",
                        "backgroundColor": "Pink"
                    }
                },
                "markdown.extensibleMarkdown.headingIdPrefix": {
                    "description": "Prefix string for id attributes of headings",
                    "type": "string",
                    "default": "heading-"
                },
                "markdown.extensibleMarkdown.includes.locatorRegex": {
                    "description": "Regular expression for include syntax.\nIf this string is null or empty, the feature is disabled.",
                    "type": "string",
                    "default": "\\@include\\(([^\\s]+?)\\)"
                },
                "markdown.extensibleMarkdown.includes.locatorDecoratorStyle": {
                    "description": "Decorator style for file include syntax",
                    "type": "object",
                    "default": {
                        "cursor": "copy",
                        "borderRadius": "0px",
                        "padding": "3px",
                        "border": "thin solid black",
                        "color": "black",
                        "backgroundColor": "PaleGreen"
                    }
                },
                "markdown.extensibleMarkdown.includes.invalidRegexMessageFormat": {
                    "description": "Format of message generated in output HTML if include file is not found; %s represents the file name",
                    "type": "string",
                    "default": "\n# Invalid regular expression for includes:  \"%s\"\n"
                },
                "markdown.extensibleMarkdown.includes.fileNotFoundMessageFormat": {
                    "description": "Format of message generated in output HTML if include file is not found; %s represents the file name",
                    "type": "string",
                    "default": "\n# File \"%s\" not found\n"
                },
                "markdown.extensibleMarkdown.includes.fileReadFailureMessageFormat": {
                    "description": "Format of message generated in output HTML if include file cannot be read; %s represents the file name",
                    "type": "string",
                    "default": "\n# Failed to read file \"%s\"\n"
                },
                "markdown.extensibleMarkdown.TOC.itemIndentInEm": {
                    "description": "The basic value of indent for the Table of Contents item in em units; this value is multiplied by the depth of nesting of each item",
                    "type": "int",
                    "default": 3
                },
                "markdown.extensibleMarkdown.TOC.regex": {
                    "description": "Regular Expression used to detect the location of the Table of Contents",
                    "type": "string",
                    "default": "^\\@toc$"
                },
                "markdown.extensibleMarkdown.TOC.decoratorStyle": {
                    "description": "Decorator style for the Table of Content marker",
                    "type": "object",
                    "default": {
                        "letterSpacing": "1px",
                        "cursor": "context-menu",
                        "fontWeight": "bold",
                        "outline": "2px solid Indigo",
                        "color": "yellow",
                        "backgroundColor": "Indigo"
                    }
                },
                "markdown.extensibleMarkdown.TOC.excludeHeaderRegex": {
                    "description": "Regular expression for the syntax of a heading element to be excluded from the Table of Contents",
                    "type": "string",
                    "default": "\\{no-toc\\}"
                },
                "markdown.extensibleMarkdown.TOC.excludeHeader.DecoratorStyle": {
                    "description": "Decorator style for the syntax of a heading element to be excluded from the Table of Contents",
                    "type": "object",
                    "default": {
                        "cursor": "no-drop",
                        "border": "thin dotted black",
                        "borderRadius": "5px",
                        "color": "black",
                        "backgroundColor": "lightGoldenrodYellow"
                    }
                },
                "markdown.extensibleMarkdown.TOC.includeLevels": {
                    "description": "An array of 0 to 6 elements representing the levels of headings to be included in the Table of Contents, can contain numbers 1 to 6",
                    "type": "array",
                    "default": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6
                    ]
                },
                "markdown.extensibleMarkdown.TOC.containerClass": {
                    "description": "CSS class of the HTML element containing the Table of Contents",
                    "type": "string",
                    "default": "toc"
                },
                "markdown.extensibleMarkdown.TOC.autoNumberingRegex": {
                    "description": "Regular expression used to locate the Table of Contents auto-numbering rule set",
                    "type": "string",
                    "default": "^\\@numbering\\s*?\\{([\\s\\S]*?)\\}"
                },
                "markdown.extensibleMarkdown.TOC.autoNumberingDecoratorStyle": {
                    "description": "Decorator style for the syntax used for the definition of the Table of Contents auto-numbering rule set",
                    "type": "object",
                    "default": {
                        "cursor": "default",
                        "color": "Maroon",
                        "backgroundColor": "Cornsilk"
                    }
                },
                "markdown.extensibleMarkdown.TOC.autoNumbering.brokenHierarchy": {
                    "description": "The prefix to the Table of Contents item used to indicate the broken hierarchy of headings",
                    "type": "string",
                    "default": "?[broken hierarchy of headings]? "
                },
                "markdown.extensibleMarkdown.options.allowHTML": {
                    "description": "Allow HTML markup in Markdown",
                    "type": "boolean",
                    "default": true
                },
                "markdown.extensibleMarkdown.options.typographer": {
                    "description": "Enable markdown-it built-in typographer feature",
                    "type": "boolean",
                    "default": true
                },
                "markdown.extensibleMarkdown.options.typographerExtensions": {
                    "description": "Replace !=, !||, <=, >=, !~, -+, -:, ||, ~~, ===, ==, !.<, .<, <|, |>, @!, @all, @exists, @empty, @union, @intersection, @left, @right, @up, @down, @imply and @minus with mathematical operators and arrows",
                    "type": "boolean",
                    "default": true
                },
                "markdown.extensibleMarkdown.options.smartQuotes": {
                    "description": "Enable markdown-it built-in smart quotes feature",
                    "type": "string",
                    "default": "“”‘’"
                },
                "markdown.extensibleMarkdown.options.additionalPlugins": {
                    "description": "Set of additional markdown-it plugins",
                    "type": "object",
                    "default": {
                        "absolutePath": "",
                        "relativePath": "",
                        "plugins": [
                            {
                                "name": "",
                                "enable": false,
                                "options": {},
                                "syntacticDecorators": [
                                    {
                                        "enable": false,
                                        "regexString": "",
                                        "tooltipFormat": "%s",
                                        "style": {}
                                    }
                                ]
                            }
                        ]
                    }
                }
            }
        },
        "configurationDefaults": {
            "[markdown]": {
                "editor.codeLens": true,
                "editor.folding": false,
                "editor.lineNumbers": "off",
                "editor.wordWrap": "on"
            }
        }
    },
    "__metadata": {
        "id": "2274c865-8de3-4905-b3ee-661afa12b4c5",
        "publisherId": "d1ee7a62-4a9b-4f51-94ff-cb9d0dc5a6c9",
        "publisherDisplayName": "Sergey A Kryukov"
    }
}
